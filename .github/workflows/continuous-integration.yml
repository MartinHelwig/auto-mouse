# SPDX-FileCopyrightText: 2023 Martin Helwig
#
# SPDX-License-Identifier: MIT

name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches: [ "main", "release/*" ]
    paths-ignore:
      - '.gitignore'
      - '*.md'
      - '.settings'
      - '.classpath'
      - '.project'
  pull_request:
    types: [opened, reopened, synchronize]
  release:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# Declare default permissions as read only.
permissions: read-all

env:
  GLOBAL_MAVEN_ARGS: --batch-mode --no-transfer-progress --errors

jobs:
  check-reuse:
    name: Reuse Compliance Check
    permissions:
      contents: read
      packages: none
      checks: none
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set Project Name
        run: |
          echo "# <a href='url'><img src='https://raw.githubusercontent.com/MartinHelwig/auto-mouse/main/src/main/resources/io/github/martinhelwig/utility/automouse/images/auto-mouse_black.png' align='left' height='48' width='48'></a> Project ${PROJECT_NAME} on ${BRANCH_NAME}" >> $GITHUB_STEP_SUMMARY

      - name: Check REUSE
        run: |
          echo "pip install reuse" > install.sh && chmod +x install.sh && ./install.sh && rm install.sh
          echo "## REUSE Compliance" >> $GITHUB_STEP_SUMMARY
          echo "For more information about REUSE see [official page](https://reuse.software/)."
          reuse lint | sed  s'/# /### /g' >> $GITHUB_STEP_SUMMARY
          reuse lint --quiet

  dependency-check:
    if: ${{ always() }}
    needs: [check-reuse]
    name: Dependency Check
    permissions:
      contents: read
      packages: none
      checks: none
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up JDK 11
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'
          check-latest: true
          cache-dependency-path: src/cache/cache.info

      - name: OWASP Check
        shell: bash
        run: ${{ env.COMMAND_MAVEN }} dependency-check:check -Dgpg.skip=true -Dmaven.test.skip=true -Djavadoc.skip=true -Dsource.skip=true -Ddependency-check.skip=false -Dnsis.skip=true -Djre.skip=true
        env:
          COMMAND_MAVEN: "${{ runner.os == 'Linux' && 'xvfb-run mvn' || 'mvn' }} ${{ env.GLOBAL_MAVEN_ARGS }}"

  execute-tests:
    if: ${{ always() }}
    needs: [check-reuse]
    name: JUnit Test (Java ${{ matrix.java }} | ${{ matrix.os }})
    permissions:
      contents: read
      packages: none
      checks: write
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        #os: [ubuntu-latest]
        java: [ 11, 17, 21 ]
        #java: [ 11 ]

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'
          check-latest: true
          cache-dependency-path: src/cache/cache.info

      - name: Running Tests
        shell: bash
        run: ${{ env.COMMAND_MAVEN }} test -Dgpg.skip=true -Dmaven.test.skip=false -Djavadoc.skip=true -Dsource.skip=true -Ddependency-check.skip=true -Dnsis.skip=true -Djre.skip=true
        env:
          COMMAND_MAVEN: "${{ runner.os == 'Linux' && 'xvfb-run mvn' || 'mvn' }} ${{ env.GLOBAL_MAVEN_ARGS }}"

      - name: Add Headline Job Summary
        run: echo "## JUnit " >> $GITHUB_STEP_SUMMARY
      
      - name: Publish Test Report
        if: success() || failure() # always run even if the previous step fails
        uses: mikepenz/action-junit-report@db71d41eb79864e25ab0337e395c352e84523afe # v4.3.1
        with:
          report_paths: target/surefire-reports/TEST-*.xml
          detailed_summary: true
          include_passed: true
          fail_on_failure: true
          require_tests: true
          check_name: 'JUnit Report (Java ${{ matrix.java }} | ${{ matrix.os }})'

      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@4fc6bf270fe893e8dda5467e432253a6961345b8 # v5.0
        with:
          coverage_results_path: target/reports/jacoco/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: ${{ env.PROJECT_NAME }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false
        
      - name: Add Coverage Job Summary
        run: echo "## Code Coverage ${{ env.coveragePercentageString }}" >> $GITHUB_STEP_SUMMARY

  build:
    needs: [dependency-check, execute-tests]
    name: Build Project
    permissions:
      contents: write
      packages: write
      checks: write
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up JDK 11
        uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'maven'
          check-latest: true
          cache-dependency-path: src/cache/cache.info
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare Environment (Global)
        run: |
          echo "preparing global environment"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Prepare Environment (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "preparing environment on linux"
          sudo apt-get install nsis

      - name: Prepare Environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "preparing environment on windows"

      - name: Prepare Environment (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "preparing environment on macOS"
          brew install makensis

      - name: Prepare Release Version
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        shell: bash
        run: ${{ env.COMMAND_MAVEN }} versions:set -DremoveSnapshot=true
        env:
          COMMAND_MAVEN: "${{ runner.os == 'Linux' && 'xvfb-run mvn' || 'mvn' }} ${{ env.GLOBAL_MAVEN_ARGS }}"

      - name: Build With Maven
        shell: bash
        run: ${{ env.COMMAND_MAVEN }} deploy site site:stage -Dgpg.skip=${{ github.event_name == 'pull_request' && 'true' || 'false' }} -Dmaven.test.skip=false -Djavadoc.skip=false -Dsource.skip=false -Ddependency-check.skip=false -Dnsis.skip=false -Djre.skip=true
        env:
          COMMAND_MAVEN: "${{ runner.os == 'Linux' && 'xvfb-run mvn' || 'mvn' }} ${{ env.GLOBAL_MAVEN_ARGS }}"
          GITHUB_TOKEN: ${{ github.token }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}         

      - name: Check Artifacts Available
        id: check_artifacts_available
        run: |
          FOUNDFILES=$(find target -name "*.exe" -maxdepth 1 | wc -l)
          FILENAME=$(find target -name "*.exe" -maxdepth 1)
          [[ ${FOUNDFILES} -eq 1 ]] || { echo "Found ${FOUNDFILES} exe files..."; exit 1; }
          echo "exe_filename=$(basename ${FILENAME})" >> $GITHUB_OUTPUT

          FOUNDFILES=$(find target -name "*.tar.gz" -maxdepth 1 | wc -l)
          FILENAME=$(find target -name "*.tar.gz" -maxdepth 1)
          [[ ${FOUNDFILES} -eq 1 ]] || { echo "Found ${FOUNDFILES} tar.gz files..."; exit 1; }
          echo "targz_filename=$(basename ${FILENAME})" >> $GITHUB_OUTPUT

      - name: Signing Artifacts
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          gpg --pinentry-mode loopback --batch --passphrase ${{ secrets.GPG_SIGNING_PASSPHRASE }} --armor --detach-sign target/${{ steps.check_artifacts_available.outputs.targz_filename }}
          gpg --pinentry-mode loopback --batch --passphrase ${{ secrets.GPG_SIGNING_PASSPHRASE }} --armor --detach-sign target/${{ steps.check_artifacts_available.outputs.exe_filename }}
          
      - name: Upload Package
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ github.event.repository.name }}_package
          path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}*
          if-no-files-found: error

      - name: Upload Installer
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ${{ github.event.repository.name }}_installer
          path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}*
          if-no-files-found: error

      - name: Publish GitHub Page
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        shell: bash
        run: ${{ env.COMMAND_MAVEN }} scm-publish:publish-scm
        env:
          COMMAND_MAVEN: "${{ runner.os == 'Linux' && 'xvfb-run mvn' || 'mvn' }} ${{ env.GLOBAL_MAVEN_ARGS }}"
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Release Artifact (tar.gz)
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}
          asset_name: ${{ steps.check_artifacts_available.outputs.targz_filename }}
          asset_content_type: application/gzip

      - name: Upload Release Artifact (tar.gz) Signature
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}.asc
          asset_name: ${{ steps.check_artifacts_available.outputs.targz_filename }}.asc
          asset_content_type: application/octet-stream
        
      - name: Upload Release Artifact (exe)
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}
          asset_name: ${{ steps.check_artifacts_available.outputs.exe_filename }}
          asset_content_type: application/octet-stream

      - name: Upload Release Artifact (exe) Signature
        if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}.asc
          asset_name: ${{ steps.check_artifacts_available.outputs.exe_filename }}.asc
          asset_content_type: application/octet-stream

  generate-authors-summary:
    if: ${{ always() }}
    needs: [build]
    name: Generate Authors Summary
    permissions:
      contents: read
      packages: none
      checks: none
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: "0" # to get the authors summary

      - name: Add Authors Summary
        run: |
          echo "## Authors Summary" >> $GITHUB_STEP_SUMMARY
          git shortlog -sce --all >> $GITHUB_STEP_SUMMARY
