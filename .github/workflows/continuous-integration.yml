# SPDX-FileCopyrightText: 2023 Martin Helwig
#
# SPDX-License-Identifier: MIT

name: Continuous Integration

on:
  workflow_dispatch:
  push:
    branches: [ "main", "release/*" ]
  pull_request:
    types: [opened, reopened]
  release:
    types: [created]

# Declare default permissions as read only.
permissions: read-all

jobs:
  build:
    name: Continuous Integration
    permissions:
      contents: write
      packages: write
      checks: write
      actions: none
      deployments: none
      id-token: none
      issues: none
      discussions: none
      pages: none
      pull-requests: none
      repository-projects: none
      security-events: none
      statuses: none
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: "0" # to get the authors summary

      - name: Set Project Name
        run: |
          echo "# Project $(PROJECT_NAME) on ${BRANCH_NAME}" >> $GITHUB_STEP_SUMMARY

      - name: Set up JDK 11
        uses: actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2 # v3.12.0
        with:
          java-version: '11'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SIGNING_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Prepare Build Environment
        run: |
          sudo apt-get install nsis
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          echo ALTERNATIVE_DEPLOYMENT_REPO=$([[ "${BRANCH_NAME}" == "main" ]] && echo "" || echo "-DaltDeploymentRepository=local-repo::default::file:target/local-repo") >> $GITHUB_ENV

      - name: Check REUSE compliance
        run: |
          echo "pip install reuse" > install.sh && chmod +x install.sh && ./install.sh && rm install.sh
          echo "## REUSE Compliance" >> $GITHUB_STEP_SUMMARY
          echo "For more information about REUSE see [official page](https://reuse.software/)."
          reuse lint | sed  s'/# /### /g' >> $GITHUB_STEP_SUMMARY
          reuse lint --quiet
          
      - name: Build And Publish With Maven
        run: xvfb-run mvn -B deploy site site:stage -Dmaven.test.skip=false -Djavadoc.skip=false -Dsource.skip=false -Ddependency-check.skip=false -Dnsis.skip=false -Djre.skip=true --no-transfer-progress $ALTERNATIVE_DEPLOYMENT_REPO
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_SIGNING_PASSPHRASE }}

      - name: Add Headline Job Summary
        run: echo "## JUnit " >> $GITHUB_STEP_SUMMARY
      
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@75b84e78b3f0aaea7ed7cf8d1d100d7f97f963ec # v4.0.0
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: target/surefire-reports/TEST-*.xml
          detailed_summary: true
          include_passed: true
          fail_on_failure: true
          require_tests: true

      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@76044ebc031589dcbce0bb1048ffee1072a43f97 # v4.9
        with:
          coverage_results_path: target/reports/jacoco/jacoco.xml
          coverage_report_name: Coverage
          coverage_report_title: ${{ env.PROJECT_NAME }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 80
          fail_below_threshold: false
          publish_only_summary: false
        
      - name: Add Coverage Job Summary
        run: echo "## Code Coverage ${{ env.coveragePercentageString }}" >> $GITHUB_STEP_SUMMARY

      - name: Add Authors Summary
        run: |
          echo "## Authors Summary" >> $GITHUB_STEP_SUMMARY
          git shortlog -sce --all >> $GITHUB_STEP_SUMMARY

      - name: Check Artifacts Available
        id: check_artifacts_available
        run: |
          FOUNDFILES=$(find target -name "*.exe" -maxdepth 1 | wc -l)
          FILENAME=$(find target -name "*.exe" -maxdepth 1)
          [[ ${FOUNDFILES} -eq 1 ]] || { echo "Found ${FOUNDFILES} exe files..."; exit 1; }
          echo "exe_filename=$(basename ${FILENAME})" >> $GITHUB_OUTPUT

          FOUNDFILES=$(find target -name "*.tar.gz" -maxdepth 1 | wc -l)
          FILENAME=$(find target -name "*.tar.gz" -maxdepth 1)
          [[ ${FOUNDFILES} -eq 1 ]] || { echo "Found ${FOUNDFILES} tar.gz files..."; exit 1; }
          echo "targz_filename=$(basename ${FILENAME})" >> $GITHUB_OUTPUT

      - name: Signing Artifacts
        run: |
          gpg --pinentry-mode loopback --batch --passphrase ${{ secrets.GPG_SIGNING_PASSPHRASE }} --armor --detach-sign target/${{ steps.check_artifacts_available.outputs.targz_filename }}
          gpg --pinentry-mode loopback --batch --passphrase ${{ secrets.GPG_SIGNING_PASSPHRASE }} --armor --detach-sign target/${{ steps.check_artifacts_available.outputs.exe_filename }}
        if: ${{ github.event_name != 'pull_request' }}

      - name: Upload Package
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ github.event.repository.name }}_package
          path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}*
          if-no-files-found: error
        if: ${{ github.event_name != 'pull_request' }}

      - name: Upload Installer
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: ${{ github.event.repository.name }}_installer
          path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}*
          if-no-files-found: error
        if: ${{ github.event_name != 'pull_request' }}

      - name: Publish GitHub Page
        run: xvfb-run mvn scm-publish:publish-scm --no-transfer-progress
        env:
          GITHUB_TOKEN: ${{ github.token }}
        if: ${{ github.event_name == 'release' && github.event.action == 'created'}}

      - name: Upload Release Artifact (tar.gz)
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}
          asset_name: ${{ steps.check_artifacts_available.outputs.targz_filename }}
          asset_content_type: application/gzip
        if: ${{ github.event_name == 'release' && github.event.action == 'created'}}

      - name: Upload Release Artifact (tar.gz) Signature
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.targz_filename }}.asc
          asset_name: ${{ steps.check_artifacts_available.outputs.targz_filename }}.asc
          asset_content_type: application/gzip
        if: ${{ github.event_name == 'release' && github.event.action == 'created'}}

      - name: Upload Release Artifact (exe)
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}
          asset_name: ${{ steps.check_artifacts_available.outputs.exe_filename }}
          asset_content_type: application/octet-stream
        if: ${{ github.event_name == 'release' && github.event.action == 'created'}}

      - name: Upload Release Artifact (exe) Signature
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ steps.check_artifacts_available.outputs.exe_filename }}.asc
          asset_name: ${{ steps.check_artifacts_available.outputs.exe_filename }}.asc
          asset_content_type: application/octet-stream
        if: ${{ github.event_name == 'release' && github.event.action == 'created'}}
